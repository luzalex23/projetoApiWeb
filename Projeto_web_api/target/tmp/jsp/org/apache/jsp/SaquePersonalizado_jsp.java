/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: jetty/9.4.44.v20210927
 * Generated at: 2022-01-28 23:46:07 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class SaquePersonalizado_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/xhtml; charset=UTF-8\" />\r\n");
      out.write("<html lang=\"pt-br\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\"/>\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\r\n");
      out.write("    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3\" crossorigin=\"anonymous\">\r\n");
      out.write("    <title>AÇÕES</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<nav class=\"navbar navbar-light bg-secondary \">\r\n");
      out.write("    <a class=\"navbar-brand\" href=\"/\">SuperInvestr</a>\r\n");
      out.write("</nav>\r\n");
      out.write("<div class=\"container\">\r\n");
      out.write("    <h1>Dados de Investimento</h1>\r\n");
      out.write("    <table class=\"table\">\r\n");
      out.write("        <theader>\r\n");
      out.write("            <tr>\r\n");
      out.write("                <th>Nome</th>\r\n");
      out.write("                <th>Objetivo</th>\r\n");
      out.write("                <th>Saldo total</th>\r\n");
      out.write("            </tr>\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td id=\"nome\"></td>\r\n");
      out.write("                <td id=\"objetivo\"></td>\r\n");
      out.write("                <td id=\"saldoTotal\"></td>\r\n");
      out.write("            </tr>\r\n");
      out.write("        </theader>\r\n");
      out.write("\r\n");
      out.write("        <tbody id=\"acoes\">\r\n");
      out.write("\r\n");
      out.write("        </tbody>\r\n");
      out.write("    </table>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<div class=\"container\">\r\n");
      out.write("    <h1>Resgate</h1>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<div class=\"container\">\r\n");
      out.write("    <table class=\"table\">\r\n");
      out.write("        <theader>\r\n");
      out.write("            <th>Ação</th>\r\n");
      out.write("            <th id=\"saldoCumulado\">Saldo acumulado</th>\r\n");
      out.write("            <th id=\"ValorAResgatar\">Valor a resgatar</th>\r\n");
      out.write("        </theader>\r\n");
      out.write("        <tbody id=\"linhas\">\r\n");
      out.write("        </tbody>\r\n");
      out.write("    </table>\r\n");
      out.write("</div>\r\n");
      out.write("<script>\r\n");
      out.write("    const investimentos = ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${acoes}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\r\n");
      out.write("    let { status, data} = investimentos.response\r\n");
      out.write("    let listaDeInvestimentos = data.listaInvestimentos\r\n");
      out.write("    const id = parseInt(location.search.match(/\\d/g)[0])\r\n");
      out.write("    var {nome, objetivo, saldoTotal, indicadorCarencia, acoes} =  listaDeInvestimentos[id]\r\n");
      out.write("    //verifica retorno da api\r\n");
      out.write("    if(status !== '200'){\r\n");
      out.write("        document.body.innerHTML = `<div class='alert alert-danger'>\r\n");
      out.write("                                       <strong>Error de requisição! </strong>\r\n");
      out.write("                                       Foi encontrado um erro na sua requisição com a API.\r\n");
      out.write("                                    </div>`;\r\n");
      out.write("    }\r\n");
      out.write("    // getters tags\r\n");
      out.write("    const idNome = document.querySelector('#nome').innerHTML = nome\r\n");
      out.write("    const idObjetivo = document.querySelector('#objetivo').innerHTML = objetivo\r\n");
      out.write("    const idSaldoTotal = document.querySelector('#saldoTotal').innerHTML = saldoTotal.toLocaleString('pt-BR', {\r\n");
      out.write("        minimumFractionDigits: 2,\r\n");
      out.write("        maximumFractionDigits: 2\r\n");
      out.write("    })\r\n");
      out.write("    // iteração sobre ações\r\n");
      out.write("    const linhas = document.querySelector('#linhas')\r\n");
      out.write("    acoes.forEach((index, value) => {\r\n");
      out.write("        const row = document.createElement('tr')\r\n");
      out.write("        const nome = document.createElement('td')\r\n");
      out.write("        nome.innerHTML = index.nome\r\n");
      out.write("        const calc = document.createElement('td')\r\n");
      out.write("        calc.innerHTML = ((saldoTotal/100) * index.percentual).toLocaleString('pt-BR', {\r\n");
      out.write("            minimumFractionDigits: 2,\r\n");
      out.write("            maximumFractionDigits: 2\r\n");
      out.write("        })\r\n");
      out.write("        calc.classList.add('acumulado')\r\n");
      out.write("        const input = document.createElement('input')\r\n");
      out.write("        input.setAttribute('id', index.id)\r\n");
      out.write("        const div = document.createElement('div')\r\n");
      out.write("        div.setAttribute('class', 'input-group mb-3')\r\n");
      out.write("        const divDollar = document.createElement('div')\r\n");
      out.write("        divDollar.setAttribute('class','input-group-prepend')\r\n");
      out.write("        const spanDollar = document.createElement('span')\r\n");
      out.write("        spanDollar.setAttribute('class','input-group-text')\r\n");
      out.write("        spanDollar.innerHTML = 'R$'\r\n");
      out.write("\r\n");
      out.write("        input.setAttribute('size', 40)\r\n");
      out.write("        input.setAttribute('class', 'form-control')\r\n");
      out.write("\r\n");
      out.write("        div.appendChild(divDollar)\r\n");
      out.write("        div.appendChild(spanDollar)\r\n");
      out.write("        div.appendChild(input)\r\n");
      out.write("        row.appendChild(nome)\r\n");
      out.write("        row.appendChild(calc)\r\n");
      out.write("        row.appendChild(div)\r\n");
      out.write("        linhas.appendChild(row)\r\n");
      out.write("\r\n");
      out.write("    })\r\n");
      out.write("\r\n");
      out.write("    const inputs = document.querySelectorAll('input')\r\n");
      out.write("    let tds = document.querySelectorAll('.acumulado')\r\n");
      out.write("    const tam = inputs.length\r\n");
      out.write("\r\n");
      out.write("    for (let i = 0; i < tam; i++){\r\n");
      out.write("        inputs[i].onkeyup = () => {\r\n");
      out.write("            $(function() {\r\n");
      out.write("                $('#'+inputs[i].id).maskMoney({decimal: ',', thousands: '.'});\r\n");
      out.write("                let number = parseFloat(tds[i].innerHTML.replace(/\\.+/g,'').replace(/\\,/g,'.'))\r\n");
      out.write("                let campo = parseFloat(inputs[i].value.replace(/\\.+/g,'').replace(/\\,/,'.'))\r\n");
      out.write("                console.log(campo, number)\r\n");
      out.write("                console.log(campo > number)\r\n");
      out.write("                if(campo > number){\r\n");
      out.write("                    let span = document.createElement('span')\r\n");
      out.write("                    span.style.color = 'red'\r\n");
      out.write("                    span.innerHTML =  `O valor a resgatar não pode ser maior que: `+ tds[i].innerHTML\r\n");
      out.write("                    tds[i].appendChild(span)\r\n");
      out.write("                }\r\n");
      out.write("            });\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("<script src=\"//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js\"></script>\r\n");
      out.write("<script src=\"//plentz.github.io/jquery-maskmoney/javascripts/jquery.maskMoney.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
